AWSTemplateFormatVersion: 2010-09-09
Description: Travel Guides Application
Resources:
  TravelGuides:
    Type: AWS::DynamoDB::Table
    Properties:
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      AttributeDefinitions:
        - AttributeName: hashId
          AttributeType: S
        - AttributeName: rangeId
          AttributeType: S
      KeySchema:
        - AttributeName: hashId
          KeyType: HASH
        - AttributeName: rangeId
          KeyType: RANGE

  DeploymentBucket:
    Type: AWS::S3::Bucket
  WebAppBucket:
    Type: AWS::S3::Bucket
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebAppBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Sid: AllowCloudFrontAccess
            Principal:
              Service: "cloudfront.amazonaws.com"
            Action: "s3:GetObject"
            Resource: !Join ["", [!GetAtt WebAppBucket.Arn, "/*"]]
            Condition:
              StringEquals:
                AWS:SourceArn:
                  !Join [
                    "",
                    [
                      !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/",
                      !GetAtt TravelGuidesDistribution.Id,
                    ],
                  ]

  # Origin Access Identity (OAI) is Legacy, so we use the OAC
  OAC:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: CloudFront S3 Web App Access
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
  TravelGuidesDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: Travel Guides Web App
        Enabled: true
        PriceClass: PriceClass_100
        DefaultRootObject: index.html
        Origins:
          - DomainName: !GetAtt WebAppBucket.DomainName
            Id: WebApp
            S3OriginConfig:
              OriginAccessIdentity: ""
            OriginAccessControlId: !GetAtt OAC.Id
        DefaultCacheBehavior:
          TargetOriginId: WebApp
          AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        # Add support for SPA
        # If the path ("the file") doesn't exist in S3, 403 is returned.
        # Because we have client-site routing, we always want to return the index.html file.
        # 404 errors are handled on the client side.
        # This way, deep URLs can be opened (e.g. "/travel-guides").
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html

  ApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: TravelGuidesApi
      Description: Travel Guides API Gateway
      ProtocolType: HTTP
      Target: !GetAtt BackendLambda.Arn
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref BackendLambda
      Principal: "apigateway.amazonaws.com"
  BackendLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "TravelGuides-Backend"
      Description: "Backend for Travel Guides"
      Runtime: provided.al2023
      Architectures:
        - arm64
      Handler: bootstrap
      Timeout: 10
      MemorySize: 128
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: lambda-handler.zip
      Environment:
        Variables:
          DYNAMODB_TABLE_TRAVEL_GUIDES: !Ref TravelGuides
      LoggingConfig:
        LogFormat: JSON
        ApplicationLogLevel: TRACE
        SystemLogLevel: INFO
        LogGroup: !Ref BackendLogs
  BackendLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: BackendLogs
      RetentionInDays: 3
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        # Trust Policy
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        # Logs, S3 Code Access (AWS-Managed)
        - "arn:aws:iam::aws:policy/AWSLambdaExecute"
      Policies:
        - PolicyName: "dynamodb-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Sid: AllowDynamoDBAccess
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:Query"
                  - "dynamodb:DeleteItem"
                Resource: !GetAtt TravelGuides.Arn

Outputs:
  DeploymentBucketName:
    Description: The name of the S3 Bucket that contains the Lambda Code
    Value: !Ref DeploymentBucket
  WebAppBucketName:
    Description: The name of the S3 Bucket that hosts the Web App
    Value: !Ref WebAppBucket
  WebAppUrl:
    Description: The URL of the Web App
    Value: !GetAtt TravelGuidesDistribution.DomainName
